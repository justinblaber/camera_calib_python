#AUTOGENERATED! DO NOT EDIT! File to edit: dev/cb_geom.ipynb (unless otherwise specified).

__all__ = ['crrgrid', 'csrgrid', 'csdgrid', 'cfpgrid', 'PGeom', 'BGeom', 'CpGeom', 'CpCSRGrid', 'CpCSDGrid', 'FmGeom',
           'FmCFPGrid', 'CbGeom']

#Cell
import matplotlib.pyplot as plt
import numpy as np

from .utils import *

#Cell
def crrgrid(num_h, num_w, spacing_h, spacing_w):
    h, w = spacing_h*(num_h-1), spacing_w*(num_w-1)
    return grid2ps(*np.meshgrid(np.linspace(-w/2, w/2, num_w), np.linspace(-h/2, h/2, num_h)), 'F')

#Cell
def csrgrid(num_h, num_w, spacing): return crrgrid(num_h, num_w, spacing, spacing)

#Cell
def csdgrid(num_h, num_w, spacing, fo): # Pretty sure this implementation can be vastly improved
    h, w = spacing*(num_h-1), spacing*(num_w-1)
    xs_grid, ys_grid = np.linspace(-w/2, w/2, num_w), np.linspace(-h/2, h/2, num_h)
    ps = np.empty((0,2))
    for x_grid in xs_grid:
        if fo:
            ys = ys_grid[0::2]
            fo = False
        else:
            ys = ys_grid[1::2]
            fo = True
        xs = np.tile(x_grid, len(ys))
        ps = np.r_[ps, np.c_[xs, ys]]
    return ps

#Cell
def cfpgrid(h, w): return crrgrid(2, 2, h, w)

#Cell
class PGeom():
    @property
    def ps(self): return NotImplementedError('Please implement ps')

#Cell
class BGeom():
    @property
    def bs(self): return NotImplementedError('Please implement bs')

#Cell
class CpGeom(PGeom, BGeom): pass

#Cell
class CpCSRGrid(CpGeom):
    def __init__(self, num_h, num_w, spacing):
        self.num_h, self.num_w, self.spacing = num_h, num_w, spacing

    @property
    def ps(self): return csrgrid(self.num_h, self.num_w, self.spacing)

    @property
    def bs(self):
        b = cfpgrid(self.spacing, self.spacing)[[0,1,3,2]]
        return np.array([b+p for p in self.ps], np.object)

#Cell
class CpCSDGrid(CpGeom):
    def __init__(self, num_h, num_w, spacing, fo):
        self.num_h, self.num_w, self.spacing, self.fo = num_h, num_w, spacing, fo

    @property
    def ps(self): return csdgrid(self.num_h, self.num_w, self.spacing, self.fo)

    @property
    def bs(self):
        b = csdgrid(3, 3, self.spacing, False)[[0,1,3,2]]
        return np.array([b+p for p in self.ps], np.object)

#Cell
class FmGeom(PGeom): pass

#Cell
class FmCFPGrid(FmGeom):
    def __init__(self, h, w):
        self.h, self.w = h, w

    @property
    def ps(self): return cfpgrid(self.h, self.w)

#Cell
class CbGeom():
    def __init__(
        self,
        h_cb,
        w_cb,
        cp_geom,
        fm_geom=None,
        idx_c_exclude=np.empty(0, dtype=np.int),
        idx_f_exclude=np.empty(0, dtype=np.int)
    ):
        self.h_cb, self.w_cb = h_cb, w_cb
        self.cp_geom = cp_geom
        self.fm_geom = fm_geom
        self.idx_c_exclude = idx_c_exclude
        self.idx_f_exclude = idx_f_exclude

    @property
    def ps_c(self): return np.delete(self.cp_geom.ps, self.idx_c_exclude, axis=0)

    @property
    def bs_c(self): return np.delete(self.cp_geom.bs, self.idx_c_exclude, axis=0)

    @property
    def ps_f(self): return np.delete(self.fm_geom.ps, self.idx_f_exclude, axis=0)

    def plt(self, ax=None):
        if ax is None:
            plt.figure(figsize=(10,10))
            ax = plt.gca()

        def _plt_ps(ps, style):
            ax.plot(ps[:,0], ps[:,1], style)
            for idx, p in enumerate(ps): ax.text(p[0], p[1], str(idx))

        # Control points
        _plt_ps(self.ps_c, 'gs')
        for b_c in self.bs_c:
            ax.plot(np.r_[b_c[:,0], b_c[0,0]],
                    np.r_[b_c[:,1], b_c[0,1]], 'r')

        # Fiducial markers
        if self.fm_geom is not None: _plt_ps(self.ps_f, 'bs')

        ax.set_xlim(-self.w_cb/2, self.w_cb/2)
        ax.set_ylim(-self.h_cb/2, self.h_cb/2)
        ax.invert_yaxis()
        ax.set_aspect(1)